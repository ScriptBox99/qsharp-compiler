// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include "{name}/{name}.hpp"

#include "Llvm.hpp"

#include <fstream>
#include <iostream>

llvm::PreservedAnalyses C{name}Pass::run(llvm::Function &/*function*/, llvm::FunctionAnalysisManager &/*fam*/)
{
  // Pass body

  llvm::errs() << "Implement your pass here\n";

  return llvm::PreservedAnalyses::all();
}


// Registering the plugin
llvm::PassPluginLibraryInfo Get{name}PluginInfo()
{
  using namespace llvm;
  return {
      LLVM_PLUGIN_API_VERSION, "{name}", LLVM_VERSION_STRING, [](PassBuilder &pb) {
        // Registering the pass
        pb.registerPipelineParsingCallback([](StringRef name, FunctionPassManager &fpm,
                                              ArrayRef<PassBuilder::PipelineElement> /*unused*/) {
          if (name == "{operation_name}")
          {
            fpm.addPass(C{name}Pass());
            return true;
          }

          return false;
        });
      }};
}

extern "C" LLVM_ATTRIBUTE_WEAK ::llvm::PassPluginLibraryInfo llvmGetPassPluginInfo()
{
  return Get{name}PluginInfo();
}
