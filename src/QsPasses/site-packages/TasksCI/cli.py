# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.


from .formatting import main as style_check_main
from .builder import main as builder_main
from .linting import main as lint_main, clang_tidy_diagnose

import click
import logging
import sys

logger = logging.getLogger()

# Logging configuration
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

# By default we only log errors
logger.setLevel(logging.ERROR)


@click.group()
@click.option('--loglevel', default="error")
def cli(loglevel):
    levels = {
        "critical": 50,
        "error": 40,
        "warning": 30,
        "info": 20,
        "debug": 10,
        "notset": 0
    }

    loglevel = loglevel.lower()
    if loglevel not in levels:
        logger.critical("Invalid log level")
        sys.exit(-1)

    logger.setLevel(levels[loglevel])
    logger.info("Loglevel set to {}".format(loglevel))


@cli.command()
@click.option('--fix-issues', default=False, is_flag=True)
def stylecheck(fix_issues):
    logger.info("Invoking style checker")

    style_check_main(fix_issues)


@cli.command()
@click.option("--diagnose", default=False, is_flag=True)
@click.option('--fix-issues', default=False, is_flag=True)
@click.option('--force', default=False, is_flag=True)
def lint(diagnose, fix_issues, force):
    if diagnose:
        clang_tidy_diagnose()
        return

    if fix_issues:
        if not force:
            print("""Fixing isssues using Clang Tidy will break your code. 
Make sure that you have committed your changes BEFORE DOING THIS.
Even so, this feature is experimental and there have been reports of
clang-tidy modying system libraries - therefore, USE THIS FEATURE AT
YOUR OWN RISK.

Write 'I understand' to proceed.""")
            print(":")
            x = input()
            if x.lower() != "i understand":
                print("Wrong answer - stopping!")
                exit(-1)

    logger.info("Invoking linter")
    lint_main(fix_issues)


@cli.command()
@click.option('--debug/--no-debug', default=True)
@click.option('--generator', default=None)
def test(debug, generator):
    logger.info("Building and testing")

    build_dir = "Debug"
    if not debug:
        build_dir = "Release"

    builder_main(build_dir, generator, True)


@cli.command()
def runci():
    build_dir = "Debug"

    style_check_main(False)
    lint_main(False)
    builder_main(build_dir, None, True)


if __name__ == '__main__':
    cli()
