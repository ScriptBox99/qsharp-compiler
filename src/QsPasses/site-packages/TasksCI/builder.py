# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

import os
from . import settings
from .settings import PROJECT_ROOT
import logging
import subprocess
import sys

logger = logging.getLogger()


def configure_cmake(build_dir: str, generator=None):

    logger.info("Source: {}".format(PROJECT_ROOT))
    logger.info("Build : {}".format(build_dir))

    os.chdir(PROJECT_ROOT)
    os.makedirs(build_dir, exist_ok=True)

    cmake_cmd = ['cmake']  # TODO: get from toolchain

    if generator is not None:
        cmake_cmd += ['-G', generator]

    cmake_cmd += [PROJECT_ROOT]

    exit_code = subprocess.call(cmake_cmd, cwd=build_dir)
    if exit_code != 0:
        logger.error('Failed to configure project')
        sys.exit(exit_code)


def build_project(build_dir: str, generator=None, concurrency=None):

    if generator in ["make", None]:
        cmd = ["make"]
    elif generator in ["ninja"]:
        cmd = ["ninja"]

    if concurrency is None:
        concurrency = settings.get_concurrency()

    cmd.append('-j{}'.format(concurrency))

    exit_code = subprocess.call(cmd, cwd=build_dir)

    if exit_code != 0:
        logger.error('Failed to make the project')
        sys.exit(exit_code)


def run_tests(build_dir: str, concurrency=None):
    cmake_cmd = ['ctest']  # TODO: get from toolchain

    if concurrency is not None:
        raise BaseException("No support for concurrent testing at the moment.")

    exit_code = subprocess.call(cmake_cmd, cwd=build_dir)
    if exit_code != 0:
        logger.error('Failed to configure project')
        sys.exit(exit_code)


def main(build_dir: str, generator=None, test: bool = False):

    configure_cmake(build_dir, generator)

    build_project(build_dir, generator)

    if test:
        run_tests(build_dir)
