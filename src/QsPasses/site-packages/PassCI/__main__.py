# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.


from .FormatSource import main as style_check_main
from .Builder import main as builder_main

import click
import logging
import sys

logger = logging.getLogger()

# Logging configuration
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

# By default we only log errors
logger.setLevel(logging.ERROR)


@click.group()
@click.option('--loglevel', default="error")
def cli(loglevel):
    levels = {
        "critical": 50,
        "error": 40,
        "warning": 30,
        "info": 20,
        "debug": 10,
        "notset": 0
    }

    loglevel = loglevel.lower()
    if loglevel not in levels:
        logger.critical("Invalid log level")
        sys.exit(-1)

    logger.setLevel(levels[loglevel])
    logger.info("Loglevel set to {}".format(loglevel))


@cli.command()
@click.option('--fix-issues/--no-fix-issues', default=False)
def style_check(fix_issues):
    logger.info("Invoking style checker")

    style_check_main()


@cli.command()
@click.option('--debug/--no-debug', default=True)
@click.option('--generator', default=None)
def test(debug, generator):
    logger.info("Building and testing")

    build_dir = "Debug"
    if not debug:
        build_dir = "Release"

    builder_main(build_dir, generator, True)


if __name__ == '__main__':
    cli()
