# Emitting classical IRs

This example demonstrates how to emit a classical IR and run a custom
pass on it. The purpose of this example is to teach the user how to apply
a pass to a IR using commandline tools only.

IRs can be represented either by a human readible language or through bytecode. For
C programs former is generated by

```sh
<<<<<<< HEAD
  clang -O1 -S -emit-llvm classical-program.c -o classical-program.ll
```

where as the latter is generated writing:

```sh
  clang -O1 -c -emit-llvm classical-program.c -o classical-program.bc
=======
% clang -O1 -S -emit-llvm classical-program.c -o classical-program.ll
```

whereas the latter is generated by executing:

```sh
% clang -O1 -c -emit-llvm classical-program.c -o classical-program.bc
>>>>>>> features/llvm-passes
```

This generates a nice and short IR which makes not too overwhelming to understand what is going on.

## Legacy passes

<<<<<<< HEAD
This part assumes that you have build the QsPasses library.

```sh
opt -load ../../{Debug,Release}/libQSharpPasses.{dylib,so} -legacy-operation-counter -analyze classical-program.ll
=======
This part assumes that you have built the Passes library.

```sh
% opt -load ../../{Debug,Release}/libQSharpPasses.{dylib,so} -legacy-operation-counter -analyze classical-program.ll
>>>>>>> features/llvm-passes
```

## Next-gen passes

<<<<<<< HEAD
This part assumes that you have build the QsPasses library.

```sh
opt -load-pass-plugin ../../{Debug,Release}/libs/libQSharpPasses.{dylib,so} --passes="print<operation-counter>" -disable-output classical-program.bc
=======
This part assumes that you have built the Passes library.

```sh
% opt -load-pass-plugin ../../{Debug,Release}/libQSharpPasses.{dylib,so} --passes="operation-counter" -disable-output classical-program.bc
>>>>>>> features/llvm-passes
```
