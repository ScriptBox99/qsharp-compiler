# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

import os
from . import settings
from . import toolchain
from .settings import PROJECT_ROOT
import logging
import subprocess
import sys
<<<<<<< HEAD
=======
from typing import Union

OptionalInt = Union[int, None]
OptionalStr = Union[str, None]

>>>>>>> features/llvm-passes

logger = logging.getLogger()


<<<<<<< HEAD
def configure_cmake(build_dir: str, generator=None):
=======
def configure_cmake(build_dir: str, generator=None) -> None:
>>>>>>> features/llvm-passes
    """
    Function that creates a build directory and runs
    cmake to configure make, ninja or another generator.
    """

    logger.info("Source: {}".format(PROJECT_ROOT))
    logger.info("Build : {}".format(build_dir))

    os.chdir(PROJECT_ROOT)
    os.makedirs(build_dir, exist_ok=True)

    cmake_cmd = [toolchain.discover_cmake()]

    if generator is not None:
        cmake_cmd += ['-G', generator]

    cmake_cmd += [PROJECT_ROOT]

    exit_code = subprocess.call(cmake_cmd, cwd=build_dir)
    if exit_code != 0:
        logger.error('Failed to configure project')
        sys.exit(exit_code)


<<<<<<< HEAD
def build_project(build_dir: str, generator=None, concurrency=None):
=======
def build_project(build_dir: str, generator: OptionalStr = None, concurrency: OptionalInt = None) -> None:
>>>>>>> features/llvm-passes
    """
    Given a build directory, this function builds all targets using
    a specified generator and concurrency.
    """

    if generator in ["make", None]:
        cmd = ["make"]
    elif generator in ["ninja"]:
        cmd = ["ninja"]

    if concurrency is None:
<<<<<<< HEAD
        concurrency = settings.get_concurrency()
=======
        concurrency = settings.get_degree_of_concurrency()
>>>>>>> features/llvm-passes

    cmd.append('-j{}'.format(concurrency))

    exit_code = subprocess.call(cmd, cwd=build_dir)

    if exit_code != 0:
        logger.error('Failed to make the project')
        sys.exit(exit_code)


<<<<<<< HEAD
def run_tests(build_dir: str, concurrency=None):
    """
    Runs the unit tests given a build directory.
    """
    fail = False

    # Running lit tests
    lit_cmd = ["lit", "tests/", "-v"]
    exit_code = subprocess.call(lit_cmd,  cwd=build_dir)

    if exit_code != 0:
        logger.error('Lit test failed')
        fail = True

    # Running CMake tests
=======
def run_tests(build_dir: str, concurrency: OptionalInt = None) -> None:
    """
    Runs the unit tests given a build directory.
    """

>>>>>>> features/llvm-passes
    cmake_cmd = [toolchain.discover_ctest()]

    if concurrency is not None:
        raise BaseException("No support for concurrent testing at the moment.")

    exit_code = subprocess.call(cmake_cmd, cwd=build_dir)
    if exit_code != 0:
<<<<<<< HEAD
        logger.error('CTest failed project')
        fail = True

    if fail:
        sys.exit(exit_code)


def main(build_dir: str, generator=None, test: bool = False):
=======
        logger.error('Failed to configure project')
        sys.exit(exit_code)


def main(build_dir: str, generator: OptionalStr = None, test: bool = False) -> None:
>>>>>>> features/llvm-passes
    """
    Runs the entire build process by first configuring, the building 
    and optionally testing the codebase.
    """

    configure_cmake(build_dir, generator)

    build_project(build_dir, generator)

    if test:
        run_tests(build_dir)
