# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

import shutil


def discover_formatter() -> str:
    """
    Finds the clang-format executable
    """
    ret = shutil.which("clang-format")
    if ret is not None:
        return ret

    for v in ["11", "10", "12"]:
        ret = shutil.which("clang-format-{}".format(v))
        if ret is not None:
            return ret

    raise BaseException("Clang format not found")


def discover_tidy() -> str:
    """
    Finds the clang-tidy executable
    """
    ret = shutil.which("clang-tidy")
    if ret is not None:
        return ret

    for v in ["11", "10", "12"]:
        ret = shutil.which("clang-tidy-{}".format(v))
        if ret is not None:
            return ret

    raise BaseException("Clang tidy not found")


def discover_cmake() -> str:
    """
    Finds the cmake executable
    """
    ret = shutil.which("cmake")

    if ret is not None:
        return ret

    raise BaseException("CMake not found")


def discover_ctest() -> str:
    """
    Finds the ctest executable
    """
    ret = shutil.which("ctest")

    if ret is not None:
        return ret

    raise BaseException("CTest not found")
